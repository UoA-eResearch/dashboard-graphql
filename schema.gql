# type Query {
#     getUserInfo(handle: String!): User!
# }

# type User {
#     name: String!
#     description: String!
#     followers_count: Int!
#     following: [String!]!
#     topTweet: Tweet
#     tweets(limit: Int!, nextToken: String): TweetConnection
# }

type Person {
    id: Int!
    divisions: [Division]
    email: String
    end_date: String
    full_name: String
    href: String
    identities: [Identity]
    last_modified: String
    notes: String
    phone: String
    preferred_name: String
    projects: [Project]
    properties: [PersonProperty]
    start_date: String
    status: PersonStatus
}

type Project {
    id: Int!
    href: String
    description: String
    division: String
    end_date: String
    next_review_date: String,
    notes: String
    requirements: String
    start_date: String
    title: String
    todo: String
    actions: [Action]
    codes: [Code]
    members: [Member]
    properties: [ProjectProperty]
    research_outputs: [ResearchOutput]
    status: ProjectStatus
    services: [Service]
}

type Service {
    type: String
    info: Object
}

type Member {
    id: Int!
    href: String
    notes: String
    person: Person
    role: Role
}

type ProjectProperty {
    id: Int!
    href: String
    propname: String
    propvalue: String
    timestamp: String
}

type PersonProperty {
    id: Int!
}

type Action {
    id: Int!
    action_type: ActionType
    date: String
    href: String
    notes: String
    person: Person
}

type ActionType {
    id: Int!
    href: String
    name: String
}

type Code {
    id: Int!
    code: String
    href: String
}

type ProjectStatus {
    id: Int!
    href: String
    name: String
}

type PersonStatus {
    id: Int!
    href: String
    name: String
}

type Role {

}

type Identity {
    id: Int!
    href: String
    username: String
}

type Division {
    id: Int!
    division: String
    divisional_role: DivisionalRole
    external: String
    href: String
}

type DivisionalRole {
    id: Int!
    href: String
    name: String
}

type ResearchOutput {
    
}

type ResearchVM {

}