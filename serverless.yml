service: cer-dashboard-graphql

custom:
  bucketBaseName: serverless-shared-bucket
  Department: "Centre for eResearch"
  Environment: "${self:provider.stage}"
  BusinessService: "Faculty of Science"
  Application: "CeR Research Dashboard"
  ProjectCode: N/A
  CostCentre: N/A
  WikiLink: N/A
  serverless-offline:
    stage: ${self:provider.stage}
    httpPort: 4000

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  endpointType: regional
  role: arn:aws:iam::416527880812:role/lambda_basic_execution_with_read_only_access_to_SSM
  tags:
    Department: ${self:custom.Department}
    Environment: ${self:custom.Environment}
    BusinessService: ${self:custom.BusinessService}
    Application: ${self:custom.Application}
    ProjectCode: ${self:custom.ProjectCode}
    CostCentre: ${self:custom.CostCentre}
    WikiLink: ${self:custom.WikiLink}
  stackTags:
    Department: ${self:custom.Department}
    Environment: ${self:custom.Environment}
    BusinessService: ${self:custom.BusinessService}
    Application: ${self:custom.Application}
    ProjectCode: ${self:custom.ProjectCode}
    CostCentre: ${self:custom.CostCentre}
    WikiLink: ${self:custom.WikiLink}
  deploymentBucket:
    name: ${self:custom.bucketBaseName}-${self:provider.stage}
  environment:
    # Environment variables available to all functions in this service
    ENV: ${self:provider.stage}
    PROJECT_DB_BASE_URL: ${file(env/${self:provider.stage}.json):PROJECT_DB_BASE_URL}
    PROJECT_DB_API_KEY: ${file(env/${self:provider.stage}.json):PROJECT_DB_API_KEY}
    COGNITO_DOMAIN: ${file(env/${self:provider.stage}.json):COGNITO_DOMAIN}
    COGNITO_REGION: ${file(env/${self:provider.stage}.json):COGNITO_REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource:
        - "arn:aws:ssm:${self:provider.region}:416527880812:parameter/${self:provider.stage}/cer-dashboard/*"
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource:
        - "arn:aws:kms:ap-southeast-2:416527880812:key/3cf7aeb4-ad8c-4505-a8e3-7d2a556e188d"
  apiGateway: # API Gateway global config
    authorizers:
      cognito-authorizer-uoapool:
        type: 'cognito'
        userPoolArn: 'arn:aws:cognito-idp:ap-southeast-2:416527880812:userpool/ap-southeast-2_pgErjyL4O' # required
        userPoolClientId: 'lrju6v80vse4bbaesjvnr2ff0' # required
        userPoolDomain: 'uoapool-sandbox' # required
        scope: 'openid profile https://my-domain.auckland.ac.nz/angular-test'  

plugins:
  - serverless-bundle # Must be first, see https://github.com/AnomalyInnovations/serverless-bundle
  - serverless-offline # See https://github.com/dherault/serverless-offline
  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin
 
functions:
  graphql:
    handler: handler.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
        cors: true
        authorizer:
          type: cognito_user_pools
          arn: arn:aws:cognito-idp:ap-southeast-2:416527880812:userpool/ap-southeast-2_pgErjyL4O
          identitySource: method.request.header.Authorization
          scopes: ${file(env/${self:provider.stage}.json):OAUTH_SCOPES}
    - http:
        path: graphql
        method: get

