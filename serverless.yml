service: cer-dashboard-graphql

custom:
  bucketBaseName: serverless-shared-bucket
  Department: "Centre for eResearch"
  Environment: "${self:provider.stage}"
  BusinessService: "Faculty of Science"
  Application: "CeR Research Dashboard"
  ProjectCode: N/A
  CostCentre: N/A
  WikiLink: N/A
  serverless-offline:
    stage: ${self:provider.stage}
    httpPort: 4000
  customDomain:
    domainName: ${file(env/${self:provider.stage}.json):infra.awsApiGatewayCustomDomainName}
    basePath: ${self:service}
    stage: ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  endpointType: regional
  role: myDefaultRole
  tags:
    Department: ${self:custom.Department}
    Environment: ${self:custom.Environment}
    BusinessService: ${self:custom.BusinessService}
    Application: ${self:custom.Application}
    ProjectCode: ${self:custom.ProjectCode}
    CostCentre: ${self:custom.CostCentre}
    WikiLink: ${self:custom.WikiLink}
  stackTags:
    Department: ${self:custom.Department}
    Environment: ${self:custom.Environment}
    BusinessService: ${self:custom.BusinessService}
    Application: ${self:custom.Application}
    ProjectCode: ${self:custom.ProjectCode}
    CostCentre: ${self:custom.CostCentre}
    WikiLink: ${self:custom.WikiLink}
  deploymentBucket:
    name: ${self:custom.bucketBaseName}-${self:provider.stage}
  environment:
    # Environment variables available to all functions in this service
    ENV: ${self:provider.stage}
    NODE_ENV: ${file(env/${self:provider.stage}.json):app.NODE_ENV}
    PROJECT_DB_BASE_URL: ${file(env/${self:provider.stage}.json):app.PROJECT_DB_BASE_URL}
    PROJECT_DB_API_KEY: ${file(env/${self:provider.stage}.json):app.PROJECT_DB_API_KEY}
    REGROUP_V2_API_BASE_URL: ${file(env/${self:provider.stage}.json):app.REGROUP_V2_API_BASE_URL}
    REGROUP_V2_API_KEY: ${file(env/${self:provider.stage}.json):app.REGROUP_V2_API_KEY}
    COGNITO_DOMAIN: ${file(env/${self:provider.stage}.json):app.COGNITO_DOMAIN}
    REGION: ${self:provider.region}
    CORS_ACCESS_CONTROL_ALLOW_ORIGINS: "${file(env/${self:provider.stage}.json):app.CORS_ACCESS_CONTROL_ALLOW_ORIGINS}"
    PLAYGROUND_ENDPOINT: ${file(env/${self:provider.stage}.json):app.PLAYGROUND_ENDPOINT}

plugins:
  - serverless-bundle # Must be first, see https://github.com/AnomalyInnovations/serverless-bundle
  - serverless-offline # See https://github.com/dherault/serverless-offline
  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin
  - serverless-domain-manager
 
functions:
  graphql:
    handler: handler.graphqlHandler
    events:
    - http:
        path: /
        method: post
        cors:
          origin: "${file(env/${self:provider.stage}.json):app.CORS_ACCESS_CONTROL_ALLOW_ORIGINS}"
          headers:
            - Content-Type
            - Authorization
          allowCredentials: false
        authorizer:
          type: cognito_user_pools
          authorizerId:
            Ref: MyApiGatewayAuthorizer
          scopes: ${file(env/${self:provider.stage}.json):app.awsApiGatewayOauthScopes}
    - http:
        path: /
        method: get
        cors:
          origin: "${file(env/${self:provider.stage}.json):app.CORS_ACCESS_CONTROL_ALLOW_ORIGINS}"
          headers:
            - Content-Type
            - Authorization
          allowCredentials: false

resources:
  Resources:
    myDefaultRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        RoleName: ${self:service}-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                    - ssm:GetParameters
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:ssm"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "parameter/${self:provider.stage}/cer-dashboard/*"
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:kms"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "key/${file(env/${self:provider.stage}.json):infra.kmsUoaCentralKeyId}"
    MyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: cognito-authorizer-uoapool
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - "Fn::Join":
              - ":"
              - - "arn:aws:cognito-idp"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - "userpool/${file(env/${self:provider.stage}.json):infra.cognitoUserPoolId}"
    MyResourceServer:
      # TODO: modify this once a new app client is created (using test one atm) and change out the cognitoResourceServerName for cognitoAppClientName
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: https://${file(env/${self:provider.stage}.json):infra.cognitoResourceServerName}.auckland.ac.nz
        Name: ${file(env/${self:provider.stage}.json):infra.cognitoResourceServerName}
        Scopes:
          - ScopeName: ${file(env/${self:provider.stage}.json):infra.cognitoAppClientName}
            ScopeDescription: Can access to ${file(env/${self:provider.stage}.json):infra.cognitoAppClientName}
        UserPoolId: ${file(env/${self:provider.stage}.json):infra.cognitoUserPoolId}
    MyCognitoAppClient:
      DependsOn: MyResourceServer
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: ${file(env/${self:provider.stage}.json):infra.cognitoUserPoolId}
        SupportedIdentityProviders: ${file(env/${self:provider.stage}.json):infra.cognitoIdentityProvider}
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes: ${file(env/${self:provider.stage}.json):infra.cognitoAppClientScopes}
        CallbackURLs: ${file(env/${self:provider.stage}.json):infra.cognitoAppClientCallbackUrls}
        ClientName: ${file(env/${self:provider.stage}.json):infra.cognitoAppClientName}
        LogoutURLs: ${file(env/${self:provider.stage}.json):infra.cognitoAppClientLogoutUrls}
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        RefreshTokenValidity: 1
        ReadAttributes:
          - given_name
          - family_name
          - custom:EmpID
          - custom:Groups
          - name
          - email
          - preferred_username
    MyCognitoGroupMembershipParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Groupmembership list for ${self:service} Cognito Client App
        Name:
          "Fn::Join":
            - "/"
            - - /${self:provider.stage}
              - cognito
              - Ref: MyCognitoAppClient
        Tier: Standard
        Type: String
        Value: ${file(env/${self:provider.stage}.json):app.authorisedGroupmembershipList}