service: cer-dashboard-graphql

custom:
  bucketBaseName: serverless-shared-bucket
  Department: "Centre for eResearch"
  Environment: "${self:provider.stage}"
  BusinessService: "eResearch Services"
  Application: "eResearch Dashboard"
  ProjectCode: TBC
  CostCentre: TBC
  WikiLink: https://wiki.auckland.ac.nz/display/APPLCTN/eResearch+Dashboard
  Faculty: Science
  serverless-offline:
    stage: ${self:provider.stage}
    httpPort: 4000
  customDomain:
    domainName: ${file(env/${self:provider.stage}.json):infra.awsApiGatewayCustomDomainName}
    basePath: ${self:service}
    stage: ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  endpointType: regional
  role: myDefaultRole
  tags:
    Department: ${self:custom.Department}
    Environment: ${self:custom.Environment}
    BusinessService: ${self:custom.BusinessService}
    Application: ${self:custom.Application}
    ProjectCode: ${self:custom.ProjectCode}
    CostCentre: ${self:custom.CostCentre}
    WikiLink: ${self:custom.WikiLink}
    Faculty: ${self:custom.Faculty}
  stackTags:
    Department: ${self:custom.Department}
    Environment: ${self:custom.Environment}
    BusinessService: ${self:custom.BusinessService}
    Application: ${self:custom.Application}
    ProjectCode: ${self:custom.ProjectCode}
    CostCentre: ${self:custom.CostCentre}
    WikiLink: ${self:custom.WikiLink}
    Faculty: ${self:custom.Faculty}
  deploymentBucket:
    name: ${self:custom.bucketBaseName}-${self:provider.stage}
  environment:
    # Environment variables available to all functions in this service
    ENV: ${self:provider.stage}
    NODE_ENV: ${file(env/${self:provider.stage}.json):app.NODE_ENV}
    PROJECT_DB_BASE_URL: ${file(env/${self:provider.stage}.json):app.PROJECT_DB_BASE_URL}
    PROJECT_DB_API_KEY: ${file(env/${self:provider.stage}.json):app.PROJECT_DB_API_KEY}
    REGROUP_V2_API_BASE_URL: ${file(env/${self:provider.stage}.json):app.REGROUP_V2_API_BASE_URL}
    REGROUP_V2_API_KEY: ${file(env/${self:provider.stage}.json):app.REGROUP_V2_API_KEY}
    COGNITO_DOMAIN: ${file(env/${self:provider.stage}.json):app.COGNITO_DOMAIN}
    REGION: ${self:provider.region}
    CORS_ACCESS_CONTROL_ALLOW_ORIGINS: "${file(env/${self:provider.stage}.json):app.CORS_ACCESS_CONTROL_ALLOW_ORIGINS}"
    PLAYGROUND_ENDPOINT: ${file(env/${self:provider.stage}.json):app.PLAYGROUND_ENDPOINT}
    DYNAMODB_TABLE_NAME: ${file(env/${self:provider.stage}.json):app.DYNAMODB_TABLE_NAME}
    CACHE_NUMBER_OF_HOURS: ${file(env/${self:provider.stage}.json):app.CACHE_NUMBER_OF_HOURS}
  apiGateway:
    shouldStartNameWithService: true

plugins:
  - serverless-bundle # Must be first, see https://github.com/AnomalyInnovations/serverless-bundle
  - serverless-offline # See https://github.com/dherault/serverless-offline
  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin
  - serverless-domain-manager
 
functions:
  graphql:
    handler: handler.graphqlHandler
    events:
    - http:
        path: /
        method: post
        cors:
          origin: "${file(env/${self:provider.stage}.json):app.CORS_ACCESS_CONTROL_ALLOW_ORIGINS}"
          headers:
            - Content-Type
            - Authorization
          allowCredentials: false
        authorizer:
          type: cognito_user_pools
          authorizerId:
            Ref: MyApiGatewayAuthorizer
          scopes: ${file(env/${self:provider.stage}.json):app.awsApiGatewayOauthScopes}
    - http:
        path: /
        method: get
        cors:
          origin: "${file(env/${self:provider.stage}.json):app.CORS_ACCESS_CONTROL_ALLOW_ORIGINS}"
          headers:
            - Content-Type
            - Authorization
          allowCredentials: false

resources:
  Resources:
    myDefaultRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        RoleName: ${self:service}-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                    - ssm:GetParameters
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:ssm"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "parameter/${self:provider.stage}/cer-dashboard/*"
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:kms"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "key/${file(env/${self:provider.stage}.json):infra.kmsUoaCentralKeyId}"
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:UpdateItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:Query"
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/${file(env/${self:provider.stage}.json):app.DYNAMODB_TABLE_NAME}"
    MyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: cognito-authorizer-uoapool
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - "Fn::Join":
              - ":"
              - - "arn:aws:cognito-idp"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - "userpool/${file(env/${self:provider.stage}.json):infra.cognitoUserPoolId}"
    MyDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${file(env/${self:provider.stage}.json):app.DYNAMODB_TABLE_NAME}"
        AttributeDefinitions:
          - AttributeName: upi
            AttributeType: S
        KeySchema:
          - AttributeName: upi
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true